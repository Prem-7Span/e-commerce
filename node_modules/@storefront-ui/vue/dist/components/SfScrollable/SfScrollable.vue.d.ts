import { type PropType, type ConcreteComponent } from 'vue';
import { SfScrollableDirection, SfScrollableButtonsPlacement } from '@storefront-ui/vue';
declare const _sfc_main: import("vue").DefineComponent<{
    tag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    direction: {
        type: PropType<"vertical" | "horizontal">;
        default: SfScrollableDirection;
    };
    buttonsPlacement: {
        type: PropType<"none" | "floating" | "block">;
        default: SfScrollableButtonsPlacement;
    };
    wrapperClass: {
        type: (ArrayConstructor | StringConstructor | ObjectConstructor)[];
        default: string;
    };
    activeIndex: {
        type: NumberConstructor;
        default: undefined;
    };
    reduceMotion: {
        type: BooleanConstructor;
        default: undefined;
    };
    drag: {
        type: PropType<boolean | {
            sensitivity?: number | undefined;
            containerWidth?: boolean | undefined;
        } | undefined>;
        default: undefined;
    };
    prevDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    isActiveIndexCentered: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonPrevAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    buttonNextAriaLabel: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onScroll" | "onDragStart" | "onDragEnd" | "onPrev" | "onNext")[], "onScroll" | "onDragStart" | "onDragEnd" | "onPrev" | "onNext", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    direction: {
        type: PropType<"vertical" | "horizontal">;
        default: SfScrollableDirection;
    };
    buttonsPlacement: {
        type: PropType<"none" | "floating" | "block">;
        default: SfScrollableButtonsPlacement;
    };
    wrapperClass: {
        type: (ArrayConstructor | StringConstructor | ObjectConstructor)[];
        default: string;
    };
    activeIndex: {
        type: NumberConstructor;
        default: undefined;
    };
    reduceMotion: {
        type: BooleanConstructor;
        default: undefined;
    };
    drag: {
        type: PropType<boolean | {
            sensitivity?: number | undefined;
            containerWidth?: boolean | undefined;
        } | undefined>;
        default: undefined;
    };
    prevDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    isActiveIndexCentered: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonPrevAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    buttonNextAriaLabel: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onOnScroll?: ((...args: any[]) => any) | undefined;
    onOnDragStart?: ((...args: any[]) => any) | undefined;
    onOnDragEnd?: ((...args: any[]) => any) | undefined;
    onOnPrev?: ((...args: any[]) => any) | undefined;
    onOnNext?: ((...args: any[]) => any) | undefined;
}, {
    tag: string | ConcreteComponent;
    wrapperClass: string | Record<string, any> | unknown[];
    drag: boolean | {
        sensitivity?: number | undefined;
        containerWidth?: boolean | undefined;
    } | undefined;
    direction: "vertical" | "horizontal";
    buttonsPlacement: "none" | "floating" | "block";
    activeIndex: number;
    reduceMotion: boolean;
    prevDisabled: boolean;
    nextDisabled: boolean;
    isActiveIndexCentered: boolean;
    buttonPrevAriaLabel: string;
    buttonNextAriaLabel: string;
}, {}>;
export default _sfc_main;
//# sourceMappingURL=SfScrollable.vue.d.ts.map