import { defineComponent as y, toRefs as g, openBlock as r, createElementBlock as d, renderSlot as a, unref as t, normalizeStyle as w, createCommentVNode as _ } from "vue";
import { useDropdown as v } from "../../composables/useDropdown/useDropdown.mjs";
const S = ["aria-hidden"], h = /* @__PURE__ */ y({
  __name: "SfDropdown",
  props: {
    modelValue: {
      type: Boolean,
      default: !1
    },
    placement: {
      type: String,
      default: void 0
    },
    middleware: {
      type: Array,
      default: void 0
    },
    strategy: {
      type: String,
      default: void 0
    }
  },
  emits: ["update:modelValue"],
  setup(n, { emit: l }) {
    const s = n, { modelValue: e, placement: f, middleware: i, strategy: p } = g(s), {
      referenceRef: m,
      floatingRef: u,
      style: c
    } = v({
      isOpen: e,
      placement: f,
      middleware: i,
      strategy: p,
      onClose: () => l("update:modelValue", !1)
    });
    return (o, k) => (r(), d("div", {
      ref_key: "referenceRef",
      ref: m,
      class: "w-max",
      "data-testid": "dropdown"
    }, [
      a(o.$slots, "trigger"),
      t(e) ? (r(), d("div", {
        key: 0,
        ref_key: "floatingRef",
        ref: u,
        style: w(t(c)),
        "aria-hidden": !t(e) || void 0,
        "data-testid": "dropdown-content"
      }, [
        a(o.$slots, "default")
      ], 12, S)) : _("", !0)
    ], 512));
  }
});
export {
  h as default
};
