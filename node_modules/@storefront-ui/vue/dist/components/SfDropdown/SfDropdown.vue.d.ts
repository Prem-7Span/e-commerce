import { type PropType } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top" | "bottom" | "left" | "right" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "left-start" | "left-end" | "right-start" | "right-end" | undefined>;
        default: undefined;
    };
    middleware: {
        type: PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: import("@floating-ui/vue").Placement;
                strategy: import("@floating-ui/vue").Strategy;
                x: number;
                y: number;
                initialPlacement: import("@floating-ui/vue").Placement;
                middlewareData: import("@floating-ui/vue").MiddlewareData;
                rects: import("@floating-ui/vue").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/vue").Elements;
            }) => import("@floating-ui/vue").MiddlewareReturn | Promise<import("@floating-ui/vue").MiddlewareReturn>;
        }[] | undefined>;
        default: undefined;
    };
    strategy: {
        type: PropType<"fixed" | "absolute" | undefined>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top" | "bottom" | "left" | "right" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "left-start" | "left-end" | "right-start" | "right-end" | undefined>;
        default: undefined;
    };
    middleware: {
        type: PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: import("@floating-ui/vue").Placement;
                strategy: import("@floating-ui/vue").Strategy;
                x: number;
                y: number;
                initialPlacement: import("@floating-ui/vue").Placement;
                middlewareData: import("@floating-ui/vue").MiddlewareData;
                rects: import("@floating-ui/vue").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/vue").Elements;
            }) => import("@floating-ui/vue").MiddlewareReturn | Promise<import("@floating-ui/vue").MiddlewareReturn>;
        }[] | undefined>;
        default: undefined;
    };
    strategy: {
        type: PropType<"fixed" | "absolute" | undefined>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: boolean;
    placement: "top" | "bottom" | "left" | "right" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "left-start" | "left-end" | "right-start" | "right-end" | undefined;
    middleware: {
        name: string;
        options?: any;
        fn: (state: {
            placement: import("@floating-ui/vue").Placement;
            strategy: import("@floating-ui/vue").Strategy;
            x: number;
            y: number;
            initialPlacement: import("@floating-ui/vue").Placement;
            middlewareData: import("@floating-ui/vue").MiddlewareData;
            rects: import("@floating-ui/vue").ElementRects;
            platform: import("@floating-ui/core").Platform;
            elements: import("@floating-ui/vue").Elements;
        }) => import("@floating-ui/vue").MiddlewareReturn | Promise<import("@floating-ui/vue").MiddlewareReturn>;
    }[] | undefined;
    strategy: "fixed" | "absolute" | undefined;
}, {}>;
export default _sfc_main;
//# sourceMappingURL=SfDropdown.vue.d.ts.map