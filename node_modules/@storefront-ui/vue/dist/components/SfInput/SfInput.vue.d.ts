import type { PropType, ConcreteComponent } from 'vue';
import { SfInputSize } from '@storefront-ui/vue';
declare const _sfc_main: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    wrapperTag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    size: {
        type: PropType<"sm" | "base" | "lg">;
        default: SfInputSize;
    };
    invalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapperClass: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    wrapperTag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    size: {
        type: PropType<"sm" | "base" | "lg">;
        default: SfInputSize;
    };
    invalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapperClass: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: string | number;
    size: "sm" | "base" | "lg";
    invalid: boolean;
    wrapperTag: string | ConcreteComponent;
    wrapperClass: string | Record<string, any>;
}, {}>;
export default _sfc_main;
//# sourceMappingURL=SfInput.vue.d.ts.map