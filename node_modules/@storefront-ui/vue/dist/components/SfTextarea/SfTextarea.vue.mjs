import { defineComponent as p, toRefs as c, computed as m, withDirectives as d, openBlock as f, createElementBlock as g, normalizeClass as x, unref as v, vModelText as y } from "vue";
import { SfTextareaSize as t } from "@storefront-ui/shared";
import { useFocusVisible as b } from "../../composables/useFocusVisible/useFocusVisible.mjs";
const S = {
  [t.sm]: " h-[56px] py-[6px] pl-4 pr-3",
  [t.base]: "h-[64px] py-2 pl-4 pr-3",
  [t.lg]: "h-[72px], p-3 pl-4"
}, T = /* @__PURE__ */ p({
  __name: "SfTextarea",
  props: {
    modelValue: {
      type: [String, Number],
      default: ""
    },
    size: {
      type: String,
      default: t.base
    },
    invalid: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["update:modelValue"],
  setup(e, { emit: o }) {
    const l = e, { modelValue: a } = c(l), { isFocusVisible: s } = b({ isTextInput: !0 }), i = m({
      get: () => a == null ? void 0 : a.value,
      set: (r) => o("update:modelValue", r)
    });
    return (r, n) => d((f(), g("textarea", {
      "onUpdate:modelValue": n[0] || (n[0] = (u) => i.value = u),
      class: x([
        "px-4 bg-white rounded-md text-neutral-900 ring-inset hover:ring-primary-800 focus:caret-primary-700 active:caret-primary-700 active:ring-primary-700 active:ring-2 focus:ring-primary-700 focus:ring-2 outline-none",
        {
          "ring-2 ring-negative-700": e.invalid,
          "ring-1 ring-neutral-200": !e.invalid,
          "focus:outline focus:outline-offset": v(s)
        },
        S[e.size]
      ]),
      "data-testid": "textarea"
    }, null, 2)), [
      [y, i.value]
    ]);
  }
});
export {
  T as default
};
