import { defineComponent as k, toRefs as B, ref as $, computed as y, openBlock as o, createElementBlock as u, Fragment as F, renderList as R, withDirectives as _, createElementVNode as I, unref as n, vModelRadio as L, renderSlot as N, createBlock as x } from "vue";
import E from "../SfIcons/SfIconStarFilled.vue.mjs";
import H from "../SfIcons/SfIconStar.vue.mjs";
import { SfRatingButtonSize as i, SfIconSize as c } from "@storefront-ui/shared";
const T = {
  role: "radiogroup",
  class: "flex",
  "data-testid": "ratingbutton"
}, w = ["onMouseenter"], A = ["name", "value", "disabled", "aria-label"], V = /* @__PURE__ */ k({
  __name: "SfRatingButton",
  props: {
    modelValue: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 5
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    name: {
      type: String,
      default: "sf-rating-button"
    },
    size: {
      type: String,
      default: i.base
    },
    getLabelText: {
      type: Function,
      default: (e) => `${e} Star${e !== 1 ? "s" : ""}`
    }
  },
  emits: ["update:modelValue"],
  setup(e, { emit: z }) {
    const m = e, { max: f, disabled: r, modelValue: S } = B(m), a = $(0), h = y(() => Array.from({ length: Math.floor(Math.abs(f.value)) }, (t, s) => s + 1)), b = (t) => t <= a.value || a.value === 0 && t <= S.value, d = {
      [i.sm]: c.base,
      [i.base]: c.lg,
      [i.lg]: c.xl
    }, p = y({
      set(t) {
        z("update:modelValue", t);
      },
      get() {
        return m.modelValue;
      }
    }), g = (t) => {
      r.value || (a.value = t);
    }, M = () => {
      r.value || (a.value = 0);
    };
    return (t, s) => (o(), u("div", T, [
      (o(!0), u(F, null, R(h.value, (l) => (o(), u("label", {
        key: l,
        onMouseenter: (v) => g(l),
        onMouseleave: M
      }, [
        _(I("input", {
          "onUpdate:modelValue": s[0] || (s[0] = (v) => p.value = v),
          type: "radio",
          class: "sr-only peer",
          name: e.name,
          value: l,
          disabled: n(r),
          "aria-label": e.getLabelText(l)
        }, null, 8, A), [
          [L, p.value]
        ]),
        N(t.$slots, "default", {
          isFilled: b(l),
          iconSize: d[e.size],
          max: n(f)
        }, () => [
          b(l) ? (o(), x(n(E), {
            key: 0,
            role: "none",
            class: "text-primary-700 cursor-pointer peer-disabled:cursor-default peer-disabled:text-disabled-500 peer-focus-visible:outline",
            size: d[e.size]
          }, null, 8, ["size"])) : (o(), x(n(H), {
            key: 1,
            role: "none",
            class: "text-neutral-500 cursor-pointer peer-disabled:cursor-default peer-disabled:text-disabled-500 peer-focus-visible:outline",
            size: d[e.size]
          }, null, 8, ["size"]))
        ])
      ], 40, w))), 128))
    ]));
  }
});
export {
  V as default
};
